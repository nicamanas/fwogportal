# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Compose Docker Application and Run Tests
      # You may pin to the exact commit or the version.
      # uses: adambirds/docker-compose-action@cf2e51f76beacad15b1046de89ee2eb22ea70bac
      uses: adambirds/docker-compose-action@v1.3.0
      with:
        # relative path to compose file(s)
        compose-file: "./backend/docker-compose.yml" # optional, default is ./docker-compose.yml
        # additional options to pass to `docker-compose` command
        # compose-flags: # optional, default is 
        # additional options to pass to `docker-compose down` command
        # down-flags: # optional, default is 
        # services to perform docker-compose up
        # services: # optional
        # additional options to pass to `docker-compose up` command
        up-flags: "-d" # optional, default is 
        # Name of the container to run tests in.
        test-container: "sbrp-backend" # optional
        # The command to use to execute tests.
        test-command: "python -m pytest --junit-xml='./test-results.xml'"
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          */test-results.xml
